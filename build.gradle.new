buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.bmuschko:gradle-docker-plugin:3.0.12')
        classpath('com.github.jengelman.gradle.plugins:shadow:2.0.1')
        classpath('org.ajoberstar:gradle-git:1.7.2')
    }
}
ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open()
    gitHash = git.head().abbreviatedId
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply from: 'config/codequality.gradle'
version = '1.0.0'
group = 'com.sixt.service'
sourceCompatibility = 1.8
repositories {
    mavenCentral()
    maven {
        url "https://dl.bintray.com/palantir/releases"
    }
}
dependencyManagement {
    imports {
        mavenBom("com.amazonaws:aws-java-sdk-bom:1.11.+")
        mavenBom("com.amazonaws:aws-xray-recorder-sdk-bom:1.1.+")
    }
}
dependencies {
    // Logger
    compile('net.logstash.logback:logstash-logback-encoder:4.10')
    // Spring
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile('org.springframework.boot:spring-boot-starter-jetty')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    // Tools
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile "org.bouncycastle:bcprov-jdk15on:1.56"
    // AWS
    compile "com.amazonaws:aws-java-sdk-kms"
    compile "com.amazonaws:aws-xray-recorder-sdk-core"
    compile "com.amazonaws:aws-xray-recorder-sdk-aws-sdk"
    // DB
    compile "mysql:mysql-connector-java:6.0.+"
    compile "com.zaxxer:HikariCP:2.6.3"
    // Compile tool
    compileOnly('org.projectlombok:lombok')
    // Test
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile "com.palantir.docker.compose:docker-compose-rule-junit4:0.31.0"
}
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
task dist(type: Zip, dependsOn: shadowJar) {
    from shadowJar.outputs.files
    archiveName "${rootProject.name}-${version}-${gitHash}.zip"
}
// TODO after dist: publish to s3
// s3 upload: https://github.com/mgk/s3-plugin/blob/master/README.md
// s3 download
// TODO download zip from s3 and define "from"
task unzip(type: Copy, dependsOn: dist) {
    from zipTree(dist.outputs.files.getSingleFile())
    into file("${buildDir}/docker")
}
task createDockerfile(type: Dockerfile, dependsOn: unzip) {
    destFile = project.file('build/docker/Dockerfile')
    from 'anapsix/alpine-java:8_server-jre_unlimited'
    volume '/tmp'
    addFile("${rootProject.name}-${version}-all.jar", '/app.jar')
    entryPoint("java", "-server", "-Dfile.encoding=UTF8", "-XX:-OmitStackTraceInFastThrow",
            "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/", "-Djava.security.egd=file:/dev/./urandom",
            "-jar", "/app.jar")
    maintainer 'Tigers team "tigers@sixt.com"'
}
task buildDockerImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    inputDir = createDockerfile.destFile.parentFile
    // TODO store in custom repository?
    /*
        private String dockerRepo() {
            String dockerRepo = "sixtysixtsixt";
            if (System.getenv().containsKey("JENKINS_HOME")) {
                dockerRepo = project.hasProperty("dockerUrl") ? project.property("dockerUrl") + "/sixtysixtsixt" : dockerRepo;
            }
            return dockerRepo;
        }
     */
    tag = "sixtysixtsixt/$project.group.$rootProject.name:${version}-${gitHash}"
}
task integrationTest(type: Test) {
    description "Run more heavyweight JUnit integration tests."
    group "verification"
    useJUnit {
        includeCategories "com.sixt.service.${rootProject.name}.IntegrationTest"
    }
    shouldRunAfter test
}
check.dependsOn integrationTest
test {
    useJUnit {
        excludeCategories "com.sixt.service.${rootProject.name}.IntegrationTest"
    }
}
